/**
* Systems Modeling API and Services
* REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.models

import org.openapitools.server.models.ActionDefinitionRequestAnyOfIsConjugated
import org.openapitools.server.models.ActionUsageRequestAnyOfMultiplicity
import org.openapitools.server.models.Annotation
import org.openapitools.server.models.Association
import org.openapitools.server.models.Conjugation
import org.openapitools.server.models.Connector
import org.openapitools.server.models.Dependency
import org.openapitools.server.models.Differencing
import org.openapitools.server.models.Disjoining
import org.openapitools.server.models.FeatureChaining
import org.openapitools.server.models.FeatureDirectionKind
import org.openapitools.server.models.FeatureInverting
import org.openapitools.server.models.Featuring
import org.openapitools.server.models.Identified
import org.openapitools.server.models.Import
import org.openapitools.server.models.Intersecting
import org.openapitools.server.models.Membership
import org.openapitools.server.models.PortionKind
import org.openapitools.server.models.RelationshipAnyOf
import org.openapitools.server.models.Specialization
import org.openapitools.server.models.TransitionFeatureKind
import org.openapitools.server.models.Unioning
import org.openapitools.server.models.VisibilityKind

/**
 * 
 * @param atId 
 * @param atType 
 * @param aliasIds 
 * @param declaredName 
 * @param declaredShortName 
 * @param documentation 
 * @param elementId 
 * @param isImplied 
 * @param isImpliedIncluded 
 * @param isLibraryElement 
 * @param name 
 * @param ownedAnnotation 
 * @param ownedElement 
 * @param ownedRelatedElement 
 * @param ownedRelationship 
 * @param owner 
 * @param owningMembership 
 * @param owningNamespace 
 * @param owningRelatedElement 
 * @param owningRelationship 
 * @param qualifiedName 
 * @param relatedElement 
 * @param shortName 
 * @param source 
 * @param target 
 * @param textualRepresentation 
 * @param feature 
 * @param type 
 * @param featureOfType 
 * @param featuringType 
 * @param owningFeatureOfType 
 * @param memberElement 
 * @param memberElementId 
 * @param memberName 
 * @param memberShortName 
 * @param membershipOwningNamespace 
 * @param ownedMemberElement 
 * @param ownedMemberElementId 
 * @param ownedMemberFeature 
 * @param ownedMemberName 
 * @param ownedMemberShortName 
 * @param owningType 
 * @param visibility 
 * @param ownedMemberParameter 
 * @param ownedSubjectParameter 
 * @param ownedStakeholderParameter 
 * @param ownedActorParameter 
 * @param ownedResultExpression 
 * @param kind 
 * @param ownedConstraint 
 * @param referencedConstraint 
 * @param ownedConcern 
 * @param referencedConcern 
 * @param ownedRequirement 
 * @param verifiedRequirement 
 * @param ownedObjectiveRequirement 
 * @param action 
 * @param transitionFeature 
 * @param ownedRendering 
 * @param referencedRendering 
 * @param chainingFeature 
 * @param featureChained 
 * @param featureInverted 
 * @param invertingFeature 
 * @param owningFeature 
 * @param conjugatedType 
 * @param originalType 
 * @param conjugatedPortDefinition 
 * @param originalPortDefinition 
 * @param intersectingType 
 * @param typeIntersected 
 * @param general 
 * @param specific 
 * @param owningClassifier 
 * @param subclassifier 
 * @param superclassifier 
 * @param subsettedFeature 
 * @param subsettingFeature 
 * @param redefinedFeature 
 * @param redefiningFeature 
 * @param referencedFeature 
 * @param referencingFeature 
 * @param typedFeature 
 * @param portDefinition 
 * @param disjoiningType 
 * @param typeDisjoined 
 * @param typeUnioned 
 * @param unioningType 
 * @param differencingType 
 * @param typeDifferenced 
 * @param association 
 * @param connectorEnd 
 * @param directedFeature 
 * @param direction 
 * @param endFeature 
 * @param endOwningType 
 * @param featureMembership 
 * @param featureTarget 
 * @param importedMembership 
 * @param inheritedFeature 
 * @param inheritedMembership 
 * @param input 
 * @param isAbstract 
 * @param isComposite 
 * @param isConjugated 
 * @param isDerived 
 * @param isEnd 
 * @param isOrdered 
 * @param isPortion 
 * @param isReadOnly 
 * @param isSufficient 
 * @param isUnique 
 * @param member 
 * @param membership 
 * @param multiplicity 
 * @param output 
 * @param ownedConjugator 
 * @param ownedDifferencing 
 * @param ownedDisjoining 
 * @param ownedEndFeature 
 * @param ownedFeature 
 * @param ownedFeatureChaining 
 * @param ownedFeatureInverting 
 * @param ownedFeatureMembership 
 * @param ownedImport 
 * @param ownedIntersecting 
 * @param ownedMember 
 * @param ownedMembership 
 * @param ownedRedefinition 
 * @param ownedReferenceSubsetting 
 * @param ownedSpecialization 
 * @param ownedSubsetting 
 * @param ownedTypeFeaturing 
 * @param ownedTyping 
 * @param ownedUnioning 
 * @param owningFeatureMembership 
 * @param relatedFeature 
 * @param sourceFeature 
 * @param targetFeature 
 * @param behavior 
 * @param interaction 
 * @param itemFeature 
 * @param itemFlowEnd 
 * @param itemType 
 * @param parameter 
 * @param sourceOutputFeature 
 * @param targetInputFeature 
 * @param effectStep 
 * @param guardExpression 
 * @param transitionStep 
 * @param triggerStep 
 * @param actionDefinition 
 * @param connectionDefinition 
 * @param definition 
 * @param directedUsage 
 * @param flowConnectionDefinition 
 * @param individualDefinition 
 * @param isIndividual 
 * @param isReference 
 * @param isVariation 
 * @param itemDefinition 
 * @param nestedAction 
 * @param nestedAllocation 
 * @param nestedAnalysisCase 
 * @param nestedAttribute 
 * @param nestedCalculation 
 * @param nestedCase 
 * @param nestedConcern 
 * @param nestedConnection 
 * @param nestedConstraint 
 * @param nestedEnumeration 
 * @param nestedFlow 
 * @param nestedInterface 
 * @param nestedItem 
 * @param nestedMetadata 
 * @param nestedOccurrence 
 * @param nestedPart 
 * @param nestedPort 
 * @param nestedReference 
 * @param nestedRendering 
 * @param nestedRequirement 
 * @param nestedState 
 * @param nestedTransition 
 * @param nestedUsage 
 * @param nestedUseCase 
 * @param nestedVerificationCase 
 * @param nestedView 
 * @param nestedViewpoint 
 * @param occurrenceDefinition 
 * @param owningDefinition 
 * @param owningUsage 
 * @param partDefinition 
 * @param portionKind 
 * @param usage 
 * @param variant 
 * @param variantMembership 
 * @param allocationDefinition 
 * @param interfaceDefinition 
 * @param associationEnd 
 * @param ownedSubclassification 
 * @param relatedType 
 * @param sourceType 
 * @param targetType 
 * @param step 
 * @param connectionEnd 
 * @param lifeClass 
 * @param ownedAction 
 * @param ownedAllocation 
 * @param ownedAnalysisCase 
 * @param ownedAttribute 
 * @param ownedCalculation 
 * @param ownedCase 
 * @param ownedConnection 
 * @param ownedEnumeration 
 * @param ownedFlow 
 * @param ownedInterface 
 * @param ownedItem 
 * @param ownedMetadata 
 * @param ownedOccurrence 
 * @param ownedPart 
 * @param ownedPort 
 * @param ownedReference 
 * @param ownedState 
 * @param ownedTransition 
 * @param ownedUsage 
 * @param ownedUseCase 
 * @param ownedVerificationCase 
 * @param ownedView 
 * @param ownedViewpoint 
 * @param allocation 
 * @param interfaceEnd 
 * @param condition 
 * @param featureWithValue 
 * @param isDefault 
 * @param isInitial 
 * @param `value` 
 * @param ownedVariantUsage 
 * @param importOwningNamespace 
 * @param importedElement 
 * @param isImportAll 
 * @param isRecursive 
 * @param importedNamespace 
 * @param client 
 * @param supplier 
 * @param annotatedElement 
 * @param annotatingElement 
 * @param owningAnnotatedElement 
 * @param owningAnnotatingElement 
 */
data class Relationship(
    val atId: java.util.UUID,
    val atType: Relationship.AtType,
    val aliasIds: kotlin.collections.List<kotlin.String>,
    val declaredName: kotlin.String,
    val declaredShortName: kotlin.String,
    val documentation: kotlin.collections.List<Identified>,
    val elementId: kotlin.String,
    val isImplied: kotlin.Boolean,
    val isImpliedIncluded: kotlin.Boolean,
    val isLibraryElement: kotlin.Boolean,
    val name: kotlin.String,
    val ownedAnnotation: kotlin.collections.List<Identified>,
    val ownedElement: kotlin.collections.List<Identified>,
    val ownedRelatedElement: kotlin.collections.List<Identified>,
    val ownedRelationship: kotlin.collections.List<Identified>,
    val owner: Identified,
    val owningMembership: Identified,
    val owningNamespace: Identified,
    val owningRelatedElement: Identified,
    val owningRelationship: Identified,
    val qualifiedName: kotlin.String,
    val relatedElement: kotlin.collections.List<Identified>,
    val shortName: kotlin.String,
    val source: kotlin.collections.List<Identified>,
    val target: kotlin.collections.List<Identified>,
    val textualRepresentation: kotlin.collections.List<Identified>,
    val feature: Identified,
    val type: Identified,
    val featureOfType: Identified,
    val featuringType: kotlin.collections.List<Identified>,
    val owningFeatureOfType: Identified,
    val memberElement: Identified,
    val memberElementId: kotlin.String,
    val memberName: kotlin.String,
    val memberShortName: kotlin.String,
    val membershipOwningNamespace: Identified,
    val ownedMemberElement: Identified,
    val ownedMemberElementId: kotlin.String,
    val ownedMemberFeature: Identified,
    val ownedMemberName: kotlin.String,
    val ownedMemberShortName: kotlin.String,
    val owningType: Identified,
    val visibility: VisibilityKind,
    val ownedMemberParameter: Identified,
    val ownedSubjectParameter: Identified,
    val ownedStakeholderParameter: Identified,
    val ownedActorParameter: Identified,
    val ownedResultExpression: Identified,
    val kind: TransitionFeatureKind,
    val ownedConstraint: Identified,
    val referencedConstraint: Identified,
    val ownedConcern: Identified,
    val referencedConcern: Identified,
    val ownedRequirement: Identified,
    val verifiedRequirement: Identified,
    val ownedObjectiveRequirement: Identified,
    val action: Identified,
    val transitionFeature: Identified,
    val ownedRendering: Identified,
    val referencedRendering: Identified,
    val chainingFeature: kotlin.collections.List<Identified>,
    val featureChained: Identified,
    val featureInverted: Identified,
    val invertingFeature: Identified,
    val owningFeature: Identified,
    val conjugatedType: Identified,
    val originalType: Identified,
    val conjugatedPortDefinition: Identified,
    val originalPortDefinition: Identified,
    val intersectingType: kotlin.collections.List<Identified>,
    val typeIntersected: Identified,
    val general: Identified,
    val specific: Identified,
    val owningClassifier: Identified,
    val subclassifier: Identified,
    val superclassifier: Identified,
    val subsettedFeature: Identified,
    val subsettingFeature: Identified,
    val redefinedFeature: Identified,
    val redefiningFeature: Identified,
    val referencedFeature: Identified,
    val referencingFeature: Identified,
    val typedFeature: Identified,
    val portDefinition: Identified,
    val disjoiningType: Identified,
    val typeDisjoined: Identified,
    val typeUnioned: Identified,
    val unioningType: kotlin.collections.List<Identified>,
    val differencingType: kotlin.collections.List<Identified>,
    val typeDifferenced: Identified,
    val association: kotlin.collections.List<Identified>,
    val connectorEnd: kotlin.collections.List<Identified>,
    val directedFeature: kotlin.collections.List<Identified>,
    val direction: FeatureDirectionKind,
    val endFeature: kotlin.collections.List<Identified>,
    val endOwningType: Identified,
    val featureMembership: kotlin.collections.List<Identified>,
    val featureTarget: Identified,
    val importedMembership: Identified,
    val inheritedFeature: kotlin.collections.List<Identified>,
    val inheritedMembership: kotlin.collections.List<Identified>,
    val input: kotlin.collections.List<Identified>,
    val isAbstract: kotlin.Boolean,
    val isComposite: kotlin.Boolean,
    val isConjugated: kotlin.Boolean,
    val isDerived: kotlin.Boolean,
    val isEnd: kotlin.Boolean,
    val isOrdered: kotlin.Boolean,
    val isPortion: kotlin.Boolean,
    val isReadOnly: kotlin.Boolean,
    val isSufficient: kotlin.Boolean,
    val isUnique: kotlin.Boolean,
    val member: kotlin.collections.List<Identified>,
    val membership: kotlin.collections.List<Identified>,
    val multiplicity: Identified,
    val output: kotlin.collections.List<Identified>,
    val ownedConjugator: Identified,
    val ownedDifferencing: kotlin.collections.List<Identified>,
    val ownedDisjoining: kotlin.collections.List<Identified>,
    val ownedEndFeature: kotlin.collections.List<Identified>,
    val ownedFeature: kotlin.collections.List<Identified>,
    val ownedFeatureChaining: kotlin.collections.List<Identified>,
    val ownedFeatureInverting: kotlin.collections.List<Identified>,
    val ownedFeatureMembership: kotlin.collections.List<Identified>,
    val ownedImport: kotlin.collections.List<Identified>,
    val ownedIntersecting: kotlin.collections.List<Identified>,
    val ownedMember: kotlin.collections.List<Identified>,
    val ownedMembership: kotlin.collections.List<Identified>,
    val ownedRedefinition: kotlin.collections.List<Identified>,
    val ownedReferenceSubsetting: Identified,
    val ownedSpecialization: kotlin.collections.List<Identified>,
    val ownedSubsetting: kotlin.collections.List<Identified>,
    val ownedTypeFeaturing: kotlin.collections.List<Identified>,
    val ownedTyping: kotlin.collections.List<Identified>,
    val ownedUnioning: kotlin.collections.List<Identified>,
    val owningFeatureMembership: Identified,
    val relatedFeature: kotlin.collections.List<Identified>,
    val sourceFeature: Identified,
    val targetFeature: kotlin.collections.List<Identified>,
    val behavior: kotlin.collections.List<Identified>,
    val interaction: kotlin.collections.List<Identified>,
    val itemFeature: ActionUsageRequestAnyOfMultiplicity,
    val itemFlowEnd: kotlin.collections.List<Identified>,
    val itemType: kotlin.collections.List<Identified>,
    val parameter: kotlin.collections.List<Identified>,
    val sourceOutputFeature: ActionUsageRequestAnyOfMultiplicity,
    val targetInputFeature: ActionUsageRequestAnyOfMultiplicity,
    val effectStep: kotlin.collections.List<Identified>,
    val guardExpression: kotlin.collections.List<Identified>,
    val transitionStep: Identified,
    val triggerStep: kotlin.collections.List<Identified>,
    val actionDefinition: kotlin.collections.List<Identified>,
    val connectionDefinition: kotlin.collections.List<Identified>,
    val definition: kotlin.collections.List<Identified>,
    val directedUsage: kotlin.collections.List<Identified>,
    val flowConnectionDefinition: kotlin.collections.List<Identified>,
    val individualDefinition: Identified,
    val isIndividual: kotlin.Boolean,
    val isReference: kotlin.Boolean,
    val isVariation: kotlin.Boolean,
    val itemDefinition: kotlin.collections.List<Identified>,
    val nestedAction: kotlin.collections.List<Identified>,
    val nestedAllocation: kotlin.collections.List<Identified>,
    val nestedAnalysisCase: kotlin.collections.List<Identified>,
    val nestedAttribute: kotlin.collections.List<Identified>,
    val nestedCalculation: kotlin.collections.List<Identified>,
    val nestedCase: kotlin.collections.List<Identified>,
    val nestedConcern: kotlin.collections.List<Identified>,
    val nestedConnection: kotlin.collections.List<Identified>,
    val nestedConstraint: kotlin.collections.List<Identified>,
    val nestedEnumeration: kotlin.collections.List<Identified>,
    val nestedFlow: kotlin.collections.List<Identified>,
    val nestedInterface: kotlin.collections.List<Identified>,
    val nestedItem: kotlin.collections.List<Identified>,
    val nestedMetadata: kotlin.collections.List<Identified>,
    val nestedOccurrence: kotlin.collections.List<Identified>,
    val nestedPart: kotlin.collections.List<Identified>,
    val nestedPort: kotlin.collections.List<Identified>,
    val nestedReference: kotlin.collections.List<Identified>,
    val nestedRendering: kotlin.collections.List<Identified>,
    val nestedRequirement: kotlin.collections.List<Identified>,
    val nestedState: kotlin.collections.List<Identified>,
    val nestedTransition: kotlin.collections.List<Identified>,
    val nestedUsage: kotlin.collections.List<Identified>,
    val nestedUseCase: kotlin.collections.List<Identified>,
    val nestedVerificationCase: kotlin.collections.List<Identified>,
    val nestedView: kotlin.collections.List<Identified>,
    val nestedViewpoint: kotlin.collections.List<Identified>,
    val occurrenceDefinition: kotlin.collections.List<Identified>,
    val owningDefinition: Identified,
    val owningUsage: Identified,
    val partDefinition: kotlin.collections.List<Identified>,
    val portionKind: PortionKind,
    val usage: kotlin.collections.List<Identified>,
    val variant: kotlin.collections.List<Identified>,
    val variantMembership: kotlin.collections.List<Identified>,
    val allocationDefinition: kotlin.collections.List<Identified>,
    val interfaceDefinition: kotlin.collections.List<Identified>,
    val associationEnd: kotlin.collections.List<Identified>,
    val ownedSubclassification: kotlin.collections.List<Identified>,
    val relatedType: kotlin.collections.List<Identified>,
    val sourceType: Identified,
    val targetType: kotlin.collections.List<Identified>,
    val step: kotlin.collections.List<Identified>,
    val connectionEnd: kotlin.collections.List<Identified>,
    val lifeClass: Identified,
    val ownedAction: kotlin.collections.List<Identified>,
    val ownedAllocation: kotlin.collections.List<Identified>,
    val ownedAnalysisCase: kotlin.collections.List<Identified>,
    val ownedAttribute: kotlin.collections.List<Identified>,
    val ownedCalculation: kotlin.collections.List<Identified>,
    val ownedCase: kotlin.collections.List<Identified>,
    val ownedConnection: kotlin.collections.List<Identified>,
    val ownedEnumeration: kotlin.collections.List<Identified>,
    val ownedFlow: kotlin.collections.List<Identified>,
    val ownedInterface: kotlin.collections.List<Identified>,
    val ownedItem: kotlin.collections.List<Identified>,
    val ownedMetadata: kotlin.collections.List<Identified>,
    val ownedOccurrence: kotlin.collections.List<Identified>,
    val ownedPart: kotlin.collections.List<Identified>,
    val ownedPort: kotlin.collections.List<Identified>,
    val ownedReference: kotlin.collections.List<Identified>,
    val ownedState: kotlin.collections.List<Identified>,
    val ownedTransition: kotlin.collections.List<Identified>,
    val ownedUsage: kotlin.collections.List<Identified>,
    val ownedUseCase: kotlin.collections.List<Identified>,
    val ownedVerificationCase: kotlin.collections.List<Identified>,
    val ownedView: kotlin.collections.List<Identified>,
    val ownedViewpoint: kotlin.collections.List<Identified>,
    val allocation: kotlin.collections.List<Identified>,
    val interfaceEnd: kotlin.collections.List<Identified>,
    val condition: Identified,
    val featureWithValue: Identified,
    val isDefault: kotlin.Boolean,
    val isInitial: kotlin.Boolean,
    val `value`: Identified,
    val ownedVariantUsage: Identified,
    val importOwningNamespace: Identified,
    val importedElement: Identified,
    val isImportAll: ActionDefinitionRequestAnyOfIsConjugated,
    val isRecursive: ActionDefinitionRequestAnyOfIsConjugated,
    val importedNamespace: Identified,
    val client: kotlin.collections.List<Identified>,
    val supplier: kotlin.collections.List<Identified>,
    val annotatedElement: Identified,
    val annotatingElement: Identified,
    val owningAnnotatedElement: Identified,
    val owningAnnotatingElement: Identified
) 
{
    /**
    * 
    * Values: Annotation
    */
    enum class AtType(val value: kotlin.String){
        Annotation("Annotation");
    }
}

