/**
* Systems Modeling API and Services
* REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
*
* The version of the OpenAPI document: 1.0
*
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openmbee.flexo.sysmlv2.apis

import io.ktor.server.application.*
import io.ktor.server.resources.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import io.ktor.util.pipeline.*
import org.apache.jena.rdf.model.Property
import org.apache.jena.rdf.model.RDFNode
import org.apache.jena.rdf.model.ResourceFactory
import org.apache.jena.vocabulary.DCTerms
import org.apache.jena.vocabulary.RDF
import org.openmbee.flexo.sysmlv2.*
import org.openmbee.flexo.sysmlv2.models.Identified
import org.openmbee.flexo.sysmlv2.models.Project
import org.openmbee.flexo.sysmlv2.models.ProjectRequest
import java.time.OffsetDateTime
import java.util.*

fun projectFromResponse(
    outgoing: Map<Property, Set<RDFNode>>,
    projectUuid: UUID = UUID.fromString(outgoing[MMS.id]?.literal()),
    branchUuid: UUID = UUID.fromString(outgoing[SYSMLV2.defaultBranchId()]?.literal())
): Project {
    return Project(
        atId = projectUuid,
        atType = Project.AtType.Project,
        created = OffsetDateTime.parse(
            outgoing[MMS.created]?.literal()
                ?: OffsetDateTime.now().toString()),
        defaultBranch = Identified(branchUuid),
        description = outgoing[DCTerms.description]?.literal()?: "",
        name = outgoing[DCTerms.title]?.literal()?: ""
    )
}

suspend fun PipelineContext<*, ApplicationCall>.createProject(
    projectUuid: UUID, projectRequest: ProjectRequest): FlexoResponse {
    // generate a UUID for the default branch if not provided
    val branchUuid = projectRequest.defaultBranch?.atId ?: UUID.randomUUID()
    // submit POST request to create new repo
    val flexoResponse = flexoRequestPost {
        orgPath("/repos")

        // set project ID slug
        addHeaders(
            "Slug" to projectUuid.toString()
        )

        // construct body payload
        turtle {
            thisSubject(
                DCTerms.title to projectRequest.name.en,
                DCTerms.description to projectRequest.description?.en,
                SYSMLV2.defaultBranchId() to branchUuid.toString().en
            )
        }
    }

    // forward failures to client
    if(flexoResponse.isFailure()) {
        return flexoResponse
    }
    //create default branch
    val defaultBranchResponse = flexoRequestPut {
        orgPath("/repos/${projectUuid}/branches/${branchUuid}")
        turtle {
            thisSubject(
                MMS.ref to ResourceFactory.createResource("./master"),
                DCTerms.title to branchUuid.toString().en
            )
        }
    }
    // forward failures to client
    if(defaultBranchResponse.isFailure()) {
        return defaultBranchResponse
    }
    return flexoResponse
}

fun Route.ProjectApi() {
    // delete a project
    delete<Paths.deleteProjectById> { deleteProject ->
        call.application.log.debug("${deleteProject.projectId}")

        notImplemented()
    }

    // get a project by its ID
    get<Paths.getProjectById> { getProject ->
        // fetch the project by the given project ID
        val flexoResponse = flexoRequestGet {
            orgPath("/repos/${getProject.projectId}")
        }

        // parse the response model, convert it JSON, and reply to client
        call.respond(flexoResponse.parseModel {
            val outgoing = indexOut("$ROOT_CONTEXT/orgs/${GlobalFlexoConfig.org}/repos/${getProject.projectId}")
            projectFromResponse(outgoing)
        })
    }

    // get all projects
    get<Paths.getProjects> { getProjects ->
        val flexoResponse = flexoRequestGet {
            orgPath("/repos")
        }
        // parse the response model, convert it to JSON, and reply to client
        call.respond(flexoResponse.parseModel {
            // find all repos and transform each one into a project by its outgoing triples
            model.listSubjectsWithProperty(RDF.type, MMS.Repo).mapWith {
                projectFromResponse(it.outgoing())
            }.toList()
        })
    }

    // create new project via POST
    post<ProjectRequest>("/projects") { projectRequest ->
        // generate a UUID for the project
        val projectId = UUID.randomUUID()
        val flexoResponse = createProject(projectId, projectRequest)
        if (flexoResponse.isFailure()) {
            return@post forward(flexoResponse)
        }
        call.respond(flexoResponse.parseLdp {
            projectFromResponse(focalOutgoing)
        })
    }

    // create new project via PUT
    put<ProjectRequest>("/projects/{projectId}") { projectRequest ->
        val projectId = "${call.parameters["projectId"]}"
        val flexoResponse = createProject(UUID.fromString(projectId), projectRequest)
        if (flexoResponse.isFailure()) {
            return@put forward(flexoResponse)
        }
        call.respond(flexoResponse.parseLdp {
            projectFromResponse(focalOutgoing)
        })
    }
}
