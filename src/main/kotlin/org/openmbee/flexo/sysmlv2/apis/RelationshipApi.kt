/**
* Systems Modeling API and Services
* REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
*
* The version of the OpenAPI document: 1.0
*
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openmbee.flexo.sysmlv2.apis

import io.ktor.server.application.*
import io.ktor.server.response.*
import org.openmbee.flexo.sysmlv2.Paths
import io.ktor.server.resources.get
import io.ktor.server.routing.*
import kotlinx.serialization.json.buildJsonArray
import org.openmbee.flexo.sysmlv2.flexoRequestPost
import org.openmbee.flexo.sysmlv2.forward

fun Route.RelationshipApi() {

    get<Paths.getRelationshipsByProjectCommitRelatedElement> {
        val direction = it.direction?: "both"
        val inQuery = """
            ?rel sysml:target elmt:${it.relatedElementId} ;
                 ?rel_p ?rel_o .
        """
        val outQuery = """
            ?rel sysml:source elmt:${it.relatedElementId} ;
                 ?rel_p ?rel_o .
        """
        val where = when (direction) {
            "in" -> inQuery
            "out" -> outQuery
            else -> """
                {
                    $inQuery
                } union {
                    $outQuery
                }
            """
        }
        val flexoResponse = flexoRequestPost {
            orgPath("/repos/${it.projectId}/locks/Commit.${it.commitId}/query")
            sparqlQuery {
                """
                prefix sysml: <https://www.omg.org/spec/SysML#>
                prefix elmt: <urn:sysmlv2:element:>
                construct {
                  ?rel ?rel_p ?rel_o .
                }
                where {
                  $where
                }
                """.trimIndent()
            }
        }

        // forward failures to client
        if(flexoResponse.isFailure()) {
            return@get forward(flexoResponse)
        }

        // parse the response model, extract the elements to JSON, and reply to client
        val result = buildJsonArray {
            flexoResponse.parseModel {
                for(subject in model.listSubjects()) {
                    add(extractModelElementToJson(subject.uri))
                }
            }
        }
        call.respond(result)
    }
}
