/**
* Systems Modeling API and Services
* REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
*
* The version of the OpenAPI document: 1.0
*
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openmbee.flexo.sysmlv2.apis

import io.ktor.http.HttpStatusCode
import io.ktor.server.application.*
import io.ktor.server.resources.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import io.ktor.util.pipeline.PipelineContext
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.*
import org.apache.jena.datatypes.xsd.XSDDatatype
import org.apache.jena.graph.Node
import org.apache.jena.graph.NodeFactory
import org.apache.jena.rdf.model.Property
import org.apache.jena.rdf.model.RDFNode
import org.apache.jena.vocabulary.DCTerms
import org.apache.jena.vocabulary.RDF
import org.openmbee.flexo.sysmlv2.*
import org.openmbee.flexo.sysmlv2.apiService.ApiCrudService
import org.openmbee.flexo.sysmlv2.models.Commit
import org.openmbee.flexo.sysmlv2.models.CommitRequest
import org.openmbee.flexo.sysmlv2.models.DataVersion
import org.openmbee.flexo.sysmlv2.models.Identified
import java.time.OffsetDateTime
import java.util.*

class InvalidSysmlSerializationError(message: String): Error(message)

fun FlexoModelHandler.commitFromModel(
    commitIri: String,
    properties: Map<Property, Set<RDFNode>?>,
    projectUuid: UUID=UUID.fromString(properties[MMS.id].resource()?.uri?.uriSuffix?: ""),
): Commit {
    // generate commit object
    return Commit(
        atId = UUID.fromString(commitIri.uriSuffix),
        atType = Commit.AtType.Commit,
        created = OffsetDateTime.parse(properties[MMS.submitted]!!.literal()!!),
        description = properties[DCTerms.description]?.literal()?: "",
        owningProject = Identified(atId = projectUuid),
        //previousCommit = properties[MMS.parent]?.map {
        //    Identified(atId = UUID.fromString(it.asResource().uri.uriSuffix))
        //}?: emptyList()
        previousCommit = null
    )
}

fun JsonPrimitive.toRdfLiteralNode(): Node {
    // resolve to XSD datatype
    val datatype = if(jsonPrimitive.isString) {
        XSDDatatype.XSDstring
    }
    else if(jsonPrimitive.booleanOrNull != null) {
        XSDDatatype.XSDboolean
    }
    else {
        XSDDatatype.XSDdecimal
    }

    // create typed literal
    return NodeFactory.createLiteral(content, datatype)
}

fun Route.CommitApi() {
    get<Paths.getChangeByProjectCommitId> {
        val exampleContentString = """{
          "payload" : {
            "owner" : {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            },
            "textualRepresentation" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "ownedAnnotation" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "ownedElement" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "aliasIds" : [ "aliasIds", "aliasIds" ],
            "@type" : "Element",
            "ownedRelationship" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "documentation" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "isImpliedIncluded" : true,
            "declaredName" : "ActionDefinitionRequest_anyOf_declaredShortName",
            "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          },
          "@type" : "DataVersion",
          "identity" : {
            "@type" : "DataIdentity",
            "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          },
          "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }"""
        call.respond(Json.decodeFromString<DataVersion>(exampleContentString))
    }

    get<Paths.getChangesByProjectCommit> {
        val exampleContentString = """[ {
          "payload" : {
            "owner" : {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            },
            "textualRepresentation" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "ownedAnnotation" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "ownedElement" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "aliasIds" : [ "aliasIds", "aliasIds" ],
            "@type" : "Element",
            "ownedRelationship" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "documentation" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "isImpliedIncluded" : true,
            "declaredName" : "ActionDefinitionRequest_anyOf_declaredShortName",
            "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          },
          "@type" : "DataVersion",
          "identity" : {
            "@type" : "DataIdentity",
            "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          },
          "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }, {
          "payload" : {
            "owner" : {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            },
            "textualRepresentation" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "ownedAnnotation" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "ownedElement" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "aliasIds" : [ "aliasIds", "aliasIds" ],
            "@type" : "Element",
            "ownedRelationship" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "documentation" : [ {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }, {
              "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            } ],
            "isImpliedIncluded" : true,
            "declaredName" : "ActionDefinitionRequest_anyOf_declaredShortName",
            "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          },
          "@type" : "DataVersion",
          "identity" : {
            "@type" : "DataIdentity",
            "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          },
          "@id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        } ]"""
        call.respond(Json.decodeFromString<List<DataVersion>>(exampleContentString))
    }

    get<Paths.getCommitByProjectAndId> { getCommits ->
        // submit GET request to retrieve project metadata
        val flexoResponse = flexoRequestPost {
            orgPath("/repos/${getCommits.projectId}/query")

            sparqlQuery {
                """
                    prefix mms: <${MMS.uri}>

                    select ?commit_p ?commit_o {
                        ?commit a mms:Commit ;
                            mms:id ${NodeFactory.createLiteral(getCommits.commitId.toString()).stringify()} ;
                            ?commit_p ?commit_o .
                    }
                """.trimIndent()
            }
        }

        // forward failures to client
        if(flexoResponse.isFailure()) {
            return@get forward(flexoResponse)
        }

        // parse the response model, convert it to JSON, and reply to client
        /*call.respond(flexoResponse.parseModel {
            // each commit node
            for(commit in indexInv(MMS.Commit.uri)[RDF.type]?: emptySet()) {
                // reference the commit's IRI
                val commitIri = commit.asResource().uri;

                // generate commit object
                commitFromModel(commitIri, indexOut(commitIri), getCommits.projectId)
            }
        })*/
        call.respond(Commit(
            atId = getCommits.commitId,
            atType = Commit.AtType.Commit,
            created = OffsetDateTime.now(),
            description = "",
            owningProject = Identified(atId = getCommits.projectId),
            previousCommit = null
        ))
    }

    get<Paths.getCommitsByProject> { getCommits ->
        // submit GET request to retrieve project metadata
        val flexoResponse = flexoRequestGet {
            orgPath("/repos/${getCommits.projectId}")
        }

        // forward failures to client
        if(flexoResponse.isFailure()) {
            return@get forward(flexoResponse)
        }

        // parse the response model, convert it to JSON, and reply to client
        /*call.respond(flexoResponse.parseModel {
            // each commit node
            for(commit in indexInv(MMS.Commit.uri)[RDF.type]?: emptySet()) {
                // reference the commit's IRI
                val commitIri = commit.asResource().uri;

                // generate commit object
                commitFromModel(commitIri, indexOut(commitIri), getCommits.projectId)
            }
        })*/
        call.respond(listOf(Commit(
            atId = UUID.randomUUID(),
            atType = Commit.AtType.Commit,
            created = OffsetDateTime.now(),
            description = "",
            owningProject = Identified(atId = getCommits.projectId),
            previousCommit = null
        )))
    }

    post<CommitRequest>("/projects/{projectId}/commits") { commit ->
        val projectId = "${call.parameters["projectId"]}"
        val context : PipelineContext<*, ApplicationCall> = this@post
        val crudService = ApiCrudService(context, projectId)
        val isNewProject = false // Should be determined by project layer
        if (commit.change!=null) try {
            crudService.changeService(commit.change, isNewProject)
            val commitObject = Commit( //TodO this will need to be persisted
                atId = UUID.randomUUID(),
                atType = Commit.AtType.Commit,
                created = OffsetDateTime.now(),
                description = "",
                owningProject = Identified(atId = UUID.fromString(projectId)),
                previousCommit = null
            )
            call.respond(commitObject)
        } catch (e: Exception) {
            call.respond(HttpStatusCode.InternalServerError, e.message ?: "Unknown error")
        }

    }
}
